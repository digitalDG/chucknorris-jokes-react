{"version":3,"sources":["chuck-norris.png","components/joke.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","chuckApi","Chuck","Joke","state","joke","loading","url","fetchJoke","_callee","categories","filteredCategories","category","res","regenerator_default","a","wrap","_context","prev","next","_this","setState","getJokeCategories","sent","console","log","filter","Math","floor","random","length","getRandomJoke","value","sourceUrl","stop","this","react_default","createElement","className","onClick","React","Component","App","src","chuck","alt","joke_Joke","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a1702cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck-norris.565a3d67.png\";","import React from \"react\";\r\nimport Chuck from \"chucknorris-io\";\r\n\r\nconst chuckApi = new Chuck();\r\n\r\nexport default class Joke extends React.Component {\r\n  state = { joke: null, loading: false, url: null };\r\n\r\n  fetchJoke = async () => {\r\n    this.setState({ loading: true });\r\n\r\n    const categories = await chuckApi.getJokeCategories();\r\n    console.log(\"Original category\", categories);\r\n\r\n    // filter out the \"explicit\" category\r\n    const filteredCategories = categories.filter( (category) => category !== 'explicit');\r\n    console.log(\"Filtered category\", filteredCategories);\r\n\r\n    // get a random category\r\n    const category = filteredCategories[Math.floor(Math.random()*filteredCategories.length)];\r\n    console.log(\"Random category\", category);\r\n\r\n    const res = await chuckApi.getRandomJoke(category);\r\n    console.log(res);\r\n    this.setState({ joke: res.value, url: res.sourceUrl, loading: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchJoke();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"hero is-primary\">\r\n      <div className=\"hero-body\">\r\n        <div className=\"container\">\r\n          <div className=\"joke\">{this.state.joke}</div>\r\n        </div>\r\n        <button className=\"btn\" onClick={this.fetchJoke}>Get Joke</button>\r\n      </div>\r\n    </section>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport chuck from './chuck-norris.png';\nimport './App.css';\nimport Joke from \"./components/joke\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={chuck} className=\"App-logo\" alt=\"Chuck Norris\" />\n          <h1 className=\"App-title\">Chuck Norris Joke Generator</h1>\n        </header>\n        <div className=\"App-intro joke\">\n          <Joke/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}